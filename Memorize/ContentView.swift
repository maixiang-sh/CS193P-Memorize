//
//  ContentView.swift
//  Memorize
//
//  Created by ‰π∞Á•• on 2024/4/30.
//

import SwiftUI

let fruits = ["üçé", "üçå", "üçá", "üçà", "üçì", "üçë", "üçâ", "ü•ù", "üçê", "üçè", "üçä", "üçã", "ü´ê", "ü•≠", "üçí", "ü••", "üçã‚Äçüü©", "üçç"]
let foods = ["ü•ê", "ü•Ø", "üçû", "ü•ñ", "ü•®", "ü•û", "üßá", "üçó", "üå≠", "üçî", "üçü", "üçï", "ü•™", "ü•ô", "üßÜ", "üåÆ", "üåØ", "ü´î", "ü•ó", "ü•ò", "üç£", "üçú", "üç±", "ü•Æ", "üç©", "üç°"]
let animals = ["üê∂", "üê±", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", "üêª‚Äç‚ùÑÔ∏è", "üê®", "üêØ", "ü¶Å", "üêÆ", "üê∑", "üê∏", "üêµ"]
let sports = ["‚öΩÔ∏è", "üèÄ", "üèà", "‚öæÔ∏è", "üéæ", "üèê", "üèâ", "ü•è", "üé±", "ü™Ä"]


struct ContentView: View {
    @State var emojis = fruits
    @State var currentThemeNmae = "Fruits"
    
    var body: some View {
        VStack {
            ///  Title
            Text("Memorize").font(.largeTitle).bold()
            /// Cards
            ScrollView {
                cards
            }
            Spacer()
            /// Button
            themesButtons
        }
        .padding()
    }
    
    /// ‰∏ÄÁªÑÂç°Áâá
    var cards: some View {
        // ‰ΩøÁî® GridItem(.adaptive(minimum: 60)) ÊÑèÂë≥ÁùÄÊàë‰ª¨Â∏åÊúõÁΩëÊ†ºÂ∞ΩÂèØËÉΩÂ§öÂú∞ÂÆπÁ∫≥ÊØèË°åÁöÑÈ°πÁõÆÔºåÊØè‰∏™È°πÁõÆÁöÑÊúÄÂ∞èÂ§ßÂ∞è‰∏∫ 60 ÁÇπ„ÄÇ
        LazyVGrid(columns: [GridItem(.adaptive(minimum: 60))]) {
            ForEach(emojis, id: \.self) { emoji in
                CardView(content: emoji)
                    .aspectRatio(2/3, contentMode: .fit)
            }
        }
        .foregroundColor(.orange)
    }
    
    
    var themesButtons: some View {
        HStack(spacing: 20) {
            themeButton(symbol: "carrot", name: "Fruits", emojis: fruits)
            themeButton(symbol: "fork.knife", name: "Foods", emojis: foods)
            themeButton(symbol: "cat", name: "Animals", emojis: animals)
            themeButton(symbol: "basketball", name: "Sports", emojis: sports)
        }
    }
    
    func themeButton(symbol: String, name: String, emojis: [String]) -> some View {
            Button {
                self.emojis = emojis.shuffled()
            } label: {
                VStack {
                    Image(systemName: symbol)
                    Text(name)
                }
            }
    }
}

#Preview {
    ContentView()
}

struct CardView: View {
    @State var isFaceUp = false
    let content: String
    
    var body: some View {
        let base = RoundedRectangle(cornerRadius: 12)
        base.fill(.white)
            .overlay {
                base.strokeBorder(lineWidth: 2) // ÂÜÖÈÉ®ÊèèËæπ
                Text(content).font(.largeTitle)
                base.fill().opacity(isFaceUp ? 0 : 1)
            }
            .onTapGesture { isFaceUp.toggle() }
    }
}
